// Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
//
// SPDX-License-Identifier: MIT

params {
    // IO options
    sample_sheet     = null  // required when 'hic_file' is undefined
    sample           = null  // required when 'sample_sheet' is undefined
    hic_file         = null  // required when 'sample_sheet' is undefined
    resolution       = null  // required when 'sample_sheet' is undefined
    beads            = null
    lads             = null
    mask             = null
    outdir           = "results/"
    publish_dir_mode = 'copy'

    // Mask files
    cytoband           = null
    assembly_gaps      = null
    masked_chromosomes = "chrY,chrM"

    // Chrom3D options
    chrom3d_args     = ""
    ploidy           = 1
    number_of_models = 5
    archive_models   = false

    // NCHG options
    nchg_mad_max          = 5
    nchg_bad_bin_fraction = 0.1

    nchg_fdr_cis          = 0.01
    nchg_log_ratio_cis    = 1.5
    nchg_fdr_trans        = 0.01
    nchg_log_ratio_trans  = 1.5

    // Plotting options
    plot_format     = 'png'
    nchg_skip_plots = false

    // Compression level used to compress intermediate files
    zstd_compression_lvl = 8
}

process {
    container = 'ghcr.io/robomics/chrom3d-nf/utils:1.0.0'

    withName:"SAMPLESHEET:CHECK_SYNTAX" {
        container = 'ghcr.io/robomics/chrom3d-nf/hictkpy:0.0.5'
    }
    withName:"SAMPLESHEET:CHECK_FILES" {
        container = 'ghcr.io/robomics/chrom3d-nf/hictkpy:0.0.5'
    }

    withName:"NCHG_CIS:GENERATE_MASK" {
        container = 'ghcr.io/paulsengroup/nchg-nf/py-utils:1.0.0'
    }
    withName:"NCHG_CIS:GENERATE_CHROMOSOME_PAIRS" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_CIS:DUMP_CHROM_SIZES" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_CIS:COMPUTE" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_CIS:MERGE" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_CIS:FILTER" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_CIS:VIEW" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_CIS:EXPECTED" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_CIS:PLOT_EXPECTED" {
        container = 'ghcr.io/paulsengroup/nchg-nf/plotting:1.0.0'
    }
    withName:"NCHG_CIS:GET_HIC_PLOT_RESOLUTION" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_CIS:PLOT_SIGNIFICANT" {
        container = 'ghcr.io/paulsengroup/nchg-nf/plotting:1.0.0'
    }

    withName:"NCHG_TRANS:GENERATE_MASK" {
        container = 'ghcr.io/paulsengroup/nchg-nf/py-utils:1.0.0'
    }
    withName:"NCHG_TRANS:GENERATE_CHROMOSOME_PAIRS" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_TRANS:DUMP_CHROM_SIZES" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_TRANS:COMPUTE" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_TRANS:MERGE" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_TRANS:FILTER" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_TRANS:VIEW" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_TRANS:EXPECTED" {
        container = 'ghcr.io/paulsengroup/nchg-nf/nchg:0.0.2'
    }
    withName:"NCHG_TRANS:PLOT_EXPECTED" {
        container = 'ghcr.io/paulsengroup/nchg-nf/plotting:1.0.0'
    }
    withName:"NCHG_TRANS:GET_HIC_PLOT_RESOLUTION" {
        container = 'ghcr.io/paulsengroup/nchg-nf/hictkpy:0.0.5'
    }
    withName:"NCHG_TRANS:PLOT_SIGNIFICANT" {
        container = 'ghcr.io/paulsengroup/nchg-nf/plotting:1.0.0'
    }

    withName:"PREPROCESSING:MERGE" {
        container = 'ghcr.io/robomics/chrom3d-nf/py-utils:1.0.0'
    }
    withName:"PREPROCESSING:DUMP_CHROM_SIZES" {
        container = 'ghcr.io/robomics/chrom3d-nf/hictk:1.0.0'
    }
    withName:"PREPROCESSING:DUMP_BINS" {
        container = 'ghcr.io/robomics/chrom3d-nf/hictk:1.0.0'
    }
    withName:"PREPROCESSING:MAKE_BEAD_GTRACK" {
        container = 'ghcr.io/robomics/chrom3d-nf/py-utils:1.0.0'
    }
    withName:"PREPROCESSING:CHANGE_PLOIDY" {
        container = 'ghcr.io/robomics/chrom3d-nf/py-utils:1.0.0'
    }

    withName:"GENERATE_SEEDS" {
        container = 'ghcr.io/robomics/chrom3d-nf/py-utils:1.0.0'
    }
    withName:"SIMULATE" {
        container = 'ghcr.io/robomics/chrom3d-nf/chrom3d:1.0.2-patched'
    }
    withName:"ARCHIVE" {
        container = 'ghcr.io/robomics/chrom3d-nf/utils:1.0.0'
    }
}

includeConfig 'config/base.config'

// Source: https://github.com/nf-core/rnaseq/blob/f801b1eda588b5247a027806562dc880f872a981/nextflow.config
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
